// frontend/src/store/index.js
import { configureStore } from '@reduxjs/toolkit'
import { setupListeners } from '@reduxjs/toolkit/query'

// Import des slices
import authSlice from './slices/authSlice'

// Import de l'API de base (RTK Query)
import { baseApi } from './api/baseApi'

// Import des APIs sp√©cifiques (pour les enregistrer)
import './api/authApi' // Enregistre les endpoints auth dans baseApi

// üè™ CONFIGURATION DU STORE PRINCIPAL
export const store = configureStore({
  reducer: {
    // Gestion de l'authentification
    auth: authSlice,
    
    // API centralis√©e avec RTK Query
    // POURQUOI ? RTK Query g√®re automatiquement :
    // - Le cache des donn√©es
    // - Les √©tats de loading/error
    // - La synchronisation des donn√©es
    [baseApi.reducerPath]: baseApi.reducer,
  },
  
  // MIDDLEWARE
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      // Configuration pour les donn√©es non-s√©rialisables
      serializableCheck: {
        ignoredActions: [
          // Actions RTK Query √† ignorer
          'persist/PERSIST',
          'persist/REHYDRATE',
        ],
      },
    })
    // ‚ö° Middleware RTK Query pour les appels API automatiques
    .concat(baseApi.middleware),
    
  // DevTools en d√©veloppement uniquement
 devTools: import.meta.env.MODE !== 'production'
})

// üîÑ LISTENERS RTK QUERY
// Active la re-synchronisation automatique des donn√©es
// quand l'utilisateur revient sur l'onglet
setupListeners(store.dispatch)

